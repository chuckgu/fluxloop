{
  "name": "fluxloop",
  "displayName": "FluxLoop",
  "description": "AI Agent Simulation and Observability",
  "version": "0.1.0",
  "publisher": "fluxloop",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Testing",
    "Debuggers",
    "Other"
  ],
  "keywords": [
    "ai",
    "agent",
    "simulation",
    "testing",
    "observability"
  ],
  "icon": "resources/icon.png",
  "activationEvents": [
    "workspaceContains:configs/project.yaml",
    "onCommand:fluxloop.init",
    "onCommand:fluxloop.runExperiment",
    "onCommand:fluxloop.generateInputs",
    "onCommand:fluxloop.enableRecording",
    "onCommand:fluxloop.disableRecording",
    "onCommand:fluxloop.showRecordingStatus"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "fluxloop.init",
        "title": "Initialize FluxLoop Project",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.createProject",
        "title": "Create FluxLoop Project",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.addProject",
        "title": "Add Existing FluxLoop Project",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.selectProject",
        "title": "Select FluxLoop Project",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.switchProject",
        "title": "Switch FluxLoop Project",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.removeProject",
        "title": "Remove FluxLoop Project",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.openProject",
        "title": "Open FluxLoop Project",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.runExperiment",
        "title": "Run Experiment",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.runSingle",
        "title": "Run Single Execution",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.generateInputs",
        "title": "Generate Inputs",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.showStatus",
        "title": "Show Status",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.enableRecording",
        "title": "Enable Recording Mode",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.disableRecording",
        "title": "Disable Recording Mode",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.showRecordingStatus",
        "title": "Show Recording Status",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.openConfig",
        "title": "Open Configuration",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.selectEnvironment",
        "title": "Select Execution Environment",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.showWireframe",
        "title": "Show Wireframe",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.showInputWizard",
        "title": "Input Generation Wizard",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.showDialogsWireframe",
        "title": "Show Dialogs Wireframe",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.showWebviewsWireframe",
        "title": "Show Webviews Wireframe",
        "category": "FluxLoop"
      },
      {
        "command": "fluxloop.showInteractiveWireframe",
        "title": "Show Interactive Wireframe",
        "category": "FluxLoop"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "resourceFilename == simulation.yaml",
          "command": "fluxloop.runExperiment",
          "group": "fluxloop"
        }
      ],
      "view/title": [
        {
          "command": "fluxloop.generateInputs",
          "when": "view == fluxloop.inputs",
          "group": "navigation@1"
        },
        {
          "command": "fluxloop.enableRecording",
          "when": "view == fluxloop.experiments",
          "group": "navigation@2"
        },
        {
          "command": "fluxloop.disableRecording",
          "when": "view == fluxloop.experiments",
          "group": "navigation@3"
        },
        {
          "command": "fluxloop.showRecordingStatus",
          "when": "view == fluxloop.experiments",
          "group": "navigation@4"
        }
      ],
      "editor/context": [
        {
          "when": "resourceExtname == .py",
          "command": "fluxloop.runSingle",
          "group": "fluxloop"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "fluxloop",
          "title": "FluxLoop",
          "icon": "resources/icon.svg"
        }
      ]
    },
    "views": {
      "fluxloop": [
        {
          "id": "fluxloop.projects",
          "name": "Projects",
          "icon": "$(folder)",
          "contextualTitle": "FluxLoop Projects"
        },
        {
          "id": "fluxloop.inputs",
          "name": "Inputs",
          "icon": "$(notebook)",
          "contextualTitle": "FluxLoop Inputs"
        },
        {
          "id": "fluxloop.experiments",
          "name": "Experiments",
          "icon": "$(beaker)",
          "contextualTitle": "FluxLoop Experiments"
        },
        {
          "id": "fluxloop.results",
          "name": "Results",
          "icon": "$(graph)",
          "contextualTitle": "Experiment Results"
        },
        {
          "id": "fluxloop.status",
          "name": "Status",
          "icon": "$(info)",
          "contextualTitle": "System Status"
        }
      ]
    },
    "configuration": {
      "title": "FluxLoop",
      "properties": {
        "fluxloop.collectorUrl": {
          "type": "string",
          "default": "http://localhost:8000",
          "description": "URL of the FluxLoop collector service"
        },
        "fluxloop.apiKey": {
          "type": "string",
          "default": "",
          "description": "API key for FluxLoop collector"
        },
        "fluxloop.defaultEnvironment": {
          "type": "string",
          "enum": [
            "Local Python",
            "Docker",
            "Dev Container"
          ],
          "default": "Local Python",
          "description": "Default execution environment"
        },
        "fluxloop.autoInstallCli": {
          "type": "boolean",
          "default": true,
          "description": "Automatically install FluxLoop CLI if not found"
        },
        "fluxloop.showOutputChannel": {
          "type": "boolean",
          "default": true,
          "description": "Automatically show output channel when running experiments"
        }
      }
    },
    "taskDefinitions": [
      {
        "type": "fluxloop",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string",
            "description": "The FluxLoop command to run"
          },
          "args": {
            "type": "array",
            "description": "Arguments for the command"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "package": "vsce package",
    "publish": "vsce publish"
  },
  "devDependencies": {
    "@types/fs-extra": "^11.0.4",
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.74.0",
    "@types/which": "^3.0.4",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.2.0",
    "@vscode/vsce": "^2.19.0",
    "eslint": "^8.28.0",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "typescript": "^4.9.3"
  },
  "dependencies": {
    "which": "^3.0.0",
    "yaml": "^2.8.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fluxloop/fluxloop"
  },
  "license": "MIT"
}
